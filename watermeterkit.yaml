#Name of device
substitutions:
  device_name: watermeterkit
  friendly_name: WaterMeterKit
  watermeterkit_software_version: "V1.1"
  watermeterkit_hardware_version: "V2"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}
  project:
    name: "smarthomeshop.watermeterkit"
    version: ${watermeterkit_software_version}

esp8266:
  board: esp01_1m
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:

#Enable Over the Air updates
ota:

dashboard_import:
  package_import_url: github://smarthomeshop/watermeterkit/watermeterkit.yaml@main

wifi:
  # remove leading '#' and fill in your wifi details
  # ssid: !secret wifi_ssid
  # password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: ${device_name}

captive_portal:
       
#Enable web server      
web_server:
  port: 80

# Status LED of ESP
status_led:
  pin: GPIO12

# Switch to restart the watermeter
switch:
  - platform: restart
    id: switch_restart
    name: "${friendly_name} Restart"

# Time for uptime
time:
  - platform: homeassistant
    id: time_homeassistant
    on_time_sync:
      - component.update: sensor_uptime_timestamp
      
  - platform: sntp
    id: time_sntp
    
# I²C Bus
#
# This component sets up the I²C bus for the ESP8266.
#
# https://esphome.io/components/i2c.html
#
i2c:
  sda: GPIO04
  scl: GPIO05

#LED for measure status
output:
  - platform: esp8266_pwm
    id: output_led_green
    pin: GPIO14
  - platform: esp8266_pwm
    id: output_led_blue
    pin: GPIO16
light:
  - platform: monochromatic
    id: light_led_green
    output: output_led_green
  - platform: monochromatic
    id: light_led_blue
    output: output_led_blue
  
sensor:
  #Wifi signal
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    update_interval: 300s
    id: sensor_wifi_signal
  # Uptime Sensor
  #
  # The uptime sensor allows you to track the time the ESP has stayed up for in
  # seconds. Time rollovers are automatically handled.
  #
  # https://esphome.io/components/sensor/uptime.html
  #
  #
  # WARNING! DO NOT USE THIS SENSOR IN HOME ASSISTANT!
  #
  # I see many of you using this sensor in Home Assistant, but please, don't.
  # There is no need to have an update of the uptime, just send the timestamp
  # of when the device started ONCE. It will have the same effect and saves
  # you system tons of processing and recording.
  #
  - platform: uptime
    id: sensor_uptime
  # Uptime Timestamp Sensor
  #
  # This sensor is an alternative for the uptime sensor, which only sends the
  # startup timestamp of the device ONCE! Instead of sending updates to
  # Home Assistant constantly.
  #
  # This saves you tons of updates to be processed and, if recorded/stored in the
  # Home Assistant database, many many less rows.
  #
  # This sensor can be triggered manually and will only update the status once!
  #
  - platform: template
    id: sensor_uptime_timestamp
    name: "${friendly_name} Uptime"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
  #Pulse meter part
  - platform: pulse_meter
    id: sensor_pulse_meter
    name: "${friendly_name} Current Usage"
    icon: "mdi:water-pump"
    unit_of_measurement: "L/min"
    internal_filter_mode: PULSE
    timeout: 2min
    internal_filter: 200ms
    accuracy_decimals: 1
    total:
      id: sensor_pulse_meter_total
      name: "${friendly_name} Total Consumption"
      icon: "mdi:cube-outline"
      unit_of_measurement: "m³"
      state_class: total_increasing
      device_class: water
      accuracy_decimals: 3
      filters:
        - multiply: 0.001
    pin: GPIO13
    on_value:
      then:
        - light.turn_on:
            id: light_led_green
            flash_length: 1s

  #HDC1080 temp & hum sensor
  - platform: hdc1080
    temperature:
      id: sensor_temperature
      name: "Temperature"
      filters:
        offset: -5.5
    humidity:
      id: sensor_humidity
      name: "Humidity"
      filters:
        offset: 12
    update_interval: 60s
    
text_sensor:
  # IP address #
  - platform: wifi_info
    ip_address:
      name: "IP address"
      icon: "mdi:network-outline"
    ssid:
      name: "Connected SSID"
    bssid:
      name: "Connected BSSID"
  - platform: version
    id: text_sensor_version
    name: "ESPHome Version"
  - platform: template
    id: text_sensor_watermeterkit_version
    name: "Software version"
    update_interval: 5h
    lambda: |-
      return {"${watermeterkit_software_version}"};